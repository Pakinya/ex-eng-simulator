import { defineStore } from 'pinia'

export interface IConsoleLog {
  id: number;
  timestamp: number;
  autogenerated?: boolean;
  title: string;
  text: string | null;
  variant: 'message' | 'warning' | 'error' | 'success';
}
export type IConsoleLogIn = Omit<IConsoleLog, 'id' | 'timestamp'>

export type URenderableProps = Extract<keyof IConsoleLog, 'title' | 'text'>

export type RenderableProps = {
  URequired: Extract<keyof IConsoleLog, 'title'>;
  UPartial: Extract<keyof IConsoleLog, 'text' | 'subtitle'>;
}

class ConsoleThread {
  buffer = [] as IConsoleLog[]

  public get id(): number {
    return this.lastInstance?.id ?? 0
  }

  private get lastInstance(): IConsoleLog | void {
    const lastIndex = this.buffer.length - 1
    return this.buffer[ lastIndex ]
  } 
}

const state: { [key: string]: InstanceType<typeof ConsoleThread> } = {
  storageThread: new ConsoleThread(),
}

export type UThreads = keyof typeof state

export const useConsoleStore = defineStore( 'console', {
  state: () => {
    return state
  },
  actions: {
    clearThread( thread: UThreads ) {
      this[ thread ].buffer = []
    },
    log( thread: UThreads, log: IConsoleLogIn ) {
      const id = this[ thread ].id
      this[ thread ].buffer.push( {
        id,
        timestamp: Date.now(),
        ...log,
      } )

    },
    replace( thread: UThreads, newLog: IConsoleLog ) {
      const index = this[ thread ].buffer.findIndex( ( log ) => log.id === newLog.id )
      this[ thread ].buffer[ index ] = newLog
    },
  },
} )

export type IConsoleStore = ReturnType<typeof useConsoleStore>


